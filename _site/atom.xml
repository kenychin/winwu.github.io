<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Win.心得小筆記</title>
 <link href="http://winwu.github.io/" rel="self"/>
 <link href="http://winwu.github.io"/>
 <updated>2013-09-17T00:55:58+08:00</updated>
 <id>http://winwu.github.io</id>
 <author>
   <name>Win Wu</name>
   <email>yiyingwu.1990@gmail.com</email>
 </author>

 
 <entry>
   <title>Day2 windows 8 的界面設計(Windows UI)</title>
   <link href="http://winwu.github.io/windows-8-app/2013/09/17/day2-win8-app-ui"/>
   <updated>2013-09-17T12:00:00+08:00</updated>
   <id>http://winwu.github.io/windows-8-app/2013/09/17/day2-win8-app-ui</id>
   <content type="html">&lt;h2 id='day2_windows_8_windows_ui'&gt;Day2 windows 8 的界面設計(Windows UI)&lt;/h2&gt;

&lt;p&gt;大家看到 win8 的開始畫面，有沒有覺得一格一格的，裡面還有東西會亂動XD 有人稱他 &lt;code&gt;Metro Style&lt;/code&gt; ，但我喜歡稱他 &lt;code&gt;Windows UI&lt;/code&gt;，因為在開發 App 的時候，我都是用 &lt;code&gt;WinJS.UI&lt;/code&gt; 去產生這些畫面上的元素，但也不是一定，你也可以很自由的設計你的界面，為什麼用自由這兩個字呢，既然都說是用 HTML開發了，你要像做 web 一樣 coding HTML 在 windows 8 App 也是會通的。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='windows_ui_'&gt;Windows UI 有以下幾點特色&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* 簡潔利落的排版風格
* 內容重於形式 (Windows UI 的設計精髓是 Content Before Chrome)
* 快速且流暢轉場效果
* 動態磚
* 橫向移動與Ｃ模型配置
* 頁面具有階層式的導航模式，清楚的資料層級&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id14'&gt;Ｃ模型配置示意圖&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C模型配置的特色是右邊是沒有邊框的，具有暗示使用者右邊還有內容的作用。 &lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/201309170026295237313533897_resize.png' /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='windows_8_app_layout'&gt;Windows 8 App Layout&lt;/h2&gt;

&lt;p&gt;對於 Layout 的排版方式，也是很講究的，請參考：&lt;a href='http://msdn.microsoft.com/en-us/library/windows/apps/hh872191.aspx'&gt;Windows-Dev Center - Windows Store apps : Laying out an app page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;針對上面的連結，我有稍微做了一點整理：&lt;/p&gt;

&lt;h3 id='grid_system_'&gt;Grid System 網格系統：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;網格系統是由 &lt;code&gt;unit&lt;/code&gt; 跟 &lt;code&gt;sub-units&lt;/code&gt; 所組成，每一個 unit 約等於 &lt;code&gt;20 X 20&lt;/code&gt; px 的正方體，每一個 unit 裡面可以包含 &lt;code&gt;16&lt;/code&gt;個 &lt;code&gt;5 X 5&lt;/code&gt; px 的 sub-units。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='page_header_'&gt;Page Header 頁面標頭：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;標頭的 baseline 應該要距離最上方 5 個 units 的大小（或者是跟最上方距離100px）， 標頭距離左側應該要有 6 個 units 的大小 (或者是跟左方距離120px)，標頭的字體是 SegoeUI Stylistic Set 20, light weight 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='content_region_'&gt;Content Region 中間區域：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;margin-top 約 7 個 units 的大小（或者說 140px）; left-margin 約 6 個 units 的大小（或者說 120px); margin-bottom 可以自由擴展，沒有限制。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id15'&gt;關於字型：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在開發任何 App，盡量使用統一的字型。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;可以使用 Windows Library 的樣式表。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Windows 8 App 所採用的首選字型是 &lt;code&gt;Segoe UI&lt;/code&gt; (常用在按鈕或選擇器)，但首選的__中文字型__是 &lt;code&gt;微軟正黑體&lt;/code&gt;，那麼到底什麼時候開採用什麼字型，官網有些說明，可以參考&lt;a href='http://msdn.microsoft.com/zh-tw/library/windows/apps/hh700394.aspx'&gt;字型的指導方針 (Windows 市集應用程式)&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;JavaScript 的 Windows Library提供以下幾種 Segoe UI，差別在於粗細：(以下資料來自&lt;a href='http://msdn.microsoft.com/zh-tw/library/windows/apps/hh700394.aspx'&gt;字型的指導方針 (Windows 市集應用程式)&lt;/a&gt;) &lt;ul&gt;
&lt;li&gt;Segoe UI Light：粗細為 200 的 Segoe UI。&lt;/li&gt;
&lt;li&gt;Segoe UI Semilight：粗細為 300 的 Segoe UI。&lt;/li&gt;
&lt;li&gt;Segoe UI：一般粗細 400 的 Segoe UI。&lt;/li&gt;
&lt;li&gt;Segoe UI Semibold：粗細為 600 的 Segoe UI。&lt;/li&gt;
&lt;li&gt;Segoe UI Bold：粗細為 700 的 Segoe UI。&lt;/li&gt;
&lt;/ul&gt; * 當只要指定特定粗細的文字樣式時，可以這樣寫&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p style=&amp;quot;font-family: &amp;#39;Segoe UI Semibold&amp;#39;&amp;quot;&amp;gt;Semibold text&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;關於字型的部分歡迎參考 &lt;a href='http://en.wikipedia.org/wiki/Segoe'&gt;wiki Segoe&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='_windows_8_app_'&gt;一些 Windows 8 App 的畫面&lt;/h2&gt;

&lt;p&gt;為了怕沒有 window 8 的人不知道 window8 的一些畫面，所以截了一些圖片。&lt;/p&gt;

&lt;p&gt;起始畫面，通常會看到畫面有很多&lt;code&gt;動態磚(Live Tile)&lt;/code&gt;，win8 的四邊通常會藏有些功能，比方說右邊是&lt;code&gt;『系統快速鍵』&lt;/code&gt;; 上下方是&lt;code&gt;『Application Bar (App Bar)』&lt;/code&gt;(上方通常是導覽用途，下方通常是功能用途)，左邊是&lt;code&gt;『呼叫系統快速鍵』&lt;/code&gt;（你開過沒有關的app會在左邊）。&lt;/p&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/201309170031095237324dd239e_resize.png' /&gt;&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/20130917003117523732557dddf_resize.png' /&gt;
&lt;h3 id='appbar_application_bar'&gt;AppBar (Application Bar)&lt;/h3&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/2013091700315152373277e93bf_resize.png' /&gt;&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/201309170031585237327ee82a3_resize.png' /&gt;
&lt;h3 id='id16'&gt;表單元素&lt;/h3&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/20130917003303523732bf09f63_resize.png' /&gt;
&lt;h3 id='search_bar_'&gt;Search Bar 搜尋框&lt;/h3&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/20130917003313523732c910935_resize.png' /&gt;
&lt;h3 id='_appbar_'&gt;有 AppBar 的例子&lt;/h3&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/20130917003323523732d39ac7d_resize.png' /&gt;&lt;hr /&gt;
&lt;h3 id='windows_8_strore_'&gt;Windows 8 Strore 看看有哪些現成的作品&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;(此圖截自：http://windows.microsoft.com/zh-tw/windows-8/apps#Cat=t1)&lt;/li&gt;

&lt;li&gt;可以點選一些 App 看看裡面的內容。 &lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130917/20130917003403523732fb568b9_resize.png' /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;本來想寫一些 windows8 的操作/觸控方式，不過我沒有平板:P，此部分忍痛跳過。&lt;/p&gt;

&lt;h3 id='id17'&gt;參考資源&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://msdn.microsoft.com/'&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下一篇我還沒有想到要寫什麼，明天再看:P&lt;/p&gt;

&lt;p&gt;本篇同時轉載於 &lt;a href='http://ithelp.ithome.com.tw/ironman6/player/yiying/dev/1'&gt;iT邦幫忙鐵人賽&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如有任何問題，歡迎留言。雖然我不一定會 :P，不過會盡量解答。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Day1 開場白與環境介紹</title>
   <link href="http://winwu.github.io/windows-8-app/2013/09/16/day1-win8-app-intro"/>
   <updated>2013-09-16T16:00:00+08:00</updated>
   <id>http://winwu.github.io/windows-8-app/2013/09/16/day1-win8-app-intro</id>
   <content type="html">&lt;h2 id='day1_'&gt;Day1 開場白與環境介紹&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;訂主題，不是一件簡單的事情&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大家好，我是win， &lt;!--img src=&quot;/images/windows-8-app/day1-0.png&quot; width=&quot;100%&quot;/--&gt; 目前是一位菜 Frontend，第一次參加鐵人賽，覺得有趣就也報名了，雖然平常就有在寫文章的習慣，不過還沒有試過連續30天發文。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id11'&gt;關於主題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;這次的主題是『用 HTML5 和 JavaScript 學習開發 Windows Apps』，嚴格來說是 Windows 8 App 啦，好多人都以為我要寫 Windows Phone，可是我沒 Phone 可玩&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130916/201309161325245236964406693_resize.png' /&gt;
&lt;p&gt;（windows 8 開始畫面）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不知道是不是有人開始用 windows 8 了？（以下偶爾會直接簡稱 win8），大部份的朋友，不是不習慣去適應這種全新的界面，不然就是還沒更新到 Windows 8 ，我反而是因為被 Window App 的設計給吸引，而升級自己的電腦從 windows 7 到 windows 8，一直以來，一直沒寫過 App，也沒有碰過 Visual Studio 這種工具，所以學 Windows 8 App 對我來說，有各式各樣的嘗試與挑戰，目前我也不是靠寫 Win8 App 維生&amp;#8230;我是帶著好奇心去學習怎麼開發的。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;希望藉由這次鐵人賽，邊玩邊學邊分享，我唯一的夢想，就是希望能真的撐到 30 天吶！（每次想到30這個數字都讓我很有壓力XD）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;放心，我不會教大家怎麼用 win8，因為我也不熟，我只會用搜尋，然後開IDE&amp;#8230;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;當然了，我相信過程也會有很多我自己需要去克服的事情，尤其開發 Windows 8 App 的中文資源實在不多，比賽當中所發表的文章，也歡迎大家不吝指教，希望大家用輕鬆愉快的角度看看我的文章就可以了，甚至我還擔心我寫到最後不知道我在寫什麼呢 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='id12'&gt;開始之前的準備。。。&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果你沒有 windows 8，那你可以考慮跟我一樣先裝 8.1 Preview ，可&lt;a href='http://windows.microsoft.com/zh-tw/windows-8/preview
'&gt;參考此網址&lt;/a&gt;。再來，如果對 windows 8 沒興趣，也歡迎看看就好：）&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;接著，如果也要一起玩，請裝 Visual Studio 2012，可&lt;a href='http://www.microsoft.com/visualstudio/cht/downloads'&gt;參考此網址&lt;/a&gt;，我是安裝試用版，可以&lt;code&gt;90&lt;/code&gt;天試用。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;visual studio 2012 硬體要求： &lt;ul&gt;
&lt;li&gt;10G 以上的硬碟空間&lt;/li&gt;
&lt;li&gt;1G 以上的RAM&lt;/li&gt;
&lt;li&gt;1.6GHz 或者更快的處理器&lt;/li&gt;
&lt;li&gt;x86或x64都可以&lt;/li&gt;
&lt;/ul&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;對了，千萬不要偷懶只安裝&lt;/strong&gt; Visual Studio 2012 而不打算把 win7 升級成 win8，因為一定要是 win8 的作業系統才有辦法在 Visual Studio 2012 看到 window8市集的範本選項（再往後的章節會提到）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;裝 Visual Studio 要等一陣子，可以買杯茶再回家&amp;#8230;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;補充：Visual Studio 有四種版本： &lt;ul&gt;
&lt;li&gt;Ultimate （我是安裝此版本)&lt;/li&gt;
&lt;li&gt;Preminum&lt;/li&gt;
&lt;li&gt;Professional&lt;/li&gt;
&lt;li&gt;Test Professional&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='id13'&gt;總結一下今天要做的事：&lt;/h2&gt;
&lt;img width='100%' src='http://ithelp.ithome.com.tw/upload/images/20130916/20130916132740523696cccdc0a_resize.png' /&gt;
&lt;p&gt;如果你成功安裝完成後，開開看 Visual Studio 2012 吧！ 希望你/妳會跟我看到類似的畫面。 (之後我們會很常看到這個畫面XD)&lt;/p&gt;
&lt;img width='50%' src='http://ithelp.ithome.com.tw/upload/images/20130916/20130916132722523696ba70a12_resize.png' /&gt;&lt;hr /&gt;
&lt;p&gt;今日進度結束， 下一篇，可能是淺談 windows 8 的界面設計。&lt;/p&gt;

&lt;p&gt;本篇同時轉載於 &lt;a href='http://ithelp.ithome.com.tw/question/10126693'&gt;it邦幫忙&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如有任何問題，歡迎留言。雖然我不一定會 :P，但盡可能找到 reference 或解答。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>第二站新開張</title>
   <link href="http://winwu.github.io/2013/09/14/my-second-blog"/>
   <updated>2013-09-14T21:00:00+08:00</updated>
   <id>http://winwu.github.io/2013/09/14/my-second-blog</id>
   <content type="html">&lt;h2 id='win'&gt;歡迎來到，Win.心得小筆記第二站&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://yiyingloveart.blogspot.tw/'&gt;第一站網址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dear All:&lt;/p&gt;

&lt;p&gt;大家好，這裡是Win.心得小筆記第二站。&lt;/p&gt;

&lt;p&gt;用 markdown 寫文章，真的有效率很多。同時，放在 github 還可以順便開 issue 做控管，還蠻喜歡這種感覺。&lt;/p&gt;

&lt;p&gt;功能跟排版，還在增強當中。&lt;/p&gt;

&lt;p&gt;目前還不太會用，blog 還很空洞，如果有任何建議，也歡迎告知，謝謝：）&lt;/p&gt;

&lt;p&gt;祝 順心 Win&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Pure CSS 實作練習(一)：Homepage</title>
   <link href="http://winwu.github.io/2013/09/13/yui-purecss-practice"/>
   <updated>2013-09-13T21:00:00+08:00</updated>
   <id>http://winwu.github.io/2013/09/13/yui-purecss-practice</id>
   <content type="html">&lt;h2 id='pure_css_homepage'&gt;Pure CSS 實作練習(一)：Homepage&lt;/h2&gt;

&lt;p&gt;這篇是延續好久好久以前寫的兩篇筆記，只是看看文章而已會讓我覺得學習中斷，感覺不是很好，後來我還是覺得想弄點什麼東西出來。之前的兩篇是這個：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://yiyingloveart.blogspot.tw/2013/08/pure-css-base-grids-forms.html'&gt;認識 Pure CSS 之筆記一：了解Base, Grids, Forms&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://yiyingloveart.blogspot.tw/2013/08/pure-css-buttons-tables-menus.html'&gt;認識 Pure CSS 之筆記二：了解Buttons, Tables, Menus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id='id8'&gt;練習的結果&lt;/h3&gt;

&lt;p&gt;主要是要練習 pureCSS 的 Grid，然後整格排版設計是參考某家搜尋網站的首頁做改造：P，icon 部分搭配的是 Font-Awesome ，Font-Awesome 的使用方式跟在用 bootstrap 的時候一樣，所以非常順手。至於配色就別跟我這個前端挑了（&amp;gt;&amp;lt;），這個練習的重點是在做前端不是Art (Orz)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://winwu.github.io/pureCSS-practice/homepage/'&gt;Demo Url&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/winwu/pureCSS-practice'&gt;Github Repo 歡迎下載&lt;/a&gt;，不過手機上看還會跑版，還沒處理。&lt;/li&gt;

&lt;li&gt;使用 Pure CSS 排列的一些樣板&lt;/li&gt;

&lt;li&gt;關於 Pure 的使用方式，可至官網多瞭解 &lt;a href='http://purecss.io/'&gt;http://purecss.io/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;範本內有搭配 Font-Awesome &lt;a href='http://fortawesome.github.io/Font-Awesome'&gt;http://fortawesome.github.io/Font-Awesome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='homepage_style'&gt;homepage Style&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Demo畫面1：（homepage/index.html）: &lt;a href='http://winwu.github.io/pureCSS-practice/homepage/'&gt;&lt;img title='' alt='altTitle' width='100%' src='https://raw.github.com/winwu/pureCSS-practice/master/homepage/demo.png' /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Demo畫面2： &lt;img title='' alt='altTitle' width='100%' src='https://raw.github.com/winwu/pureCSS-practice/master/homepage/demo2.png' /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id9'&gt;測試&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Firefox, Chrome is OK * 還不算是很成熟的作品，應該會找時間整理頁面 * 如果你有任何建議歡迎留言補充。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id10'&gt;一些建議&lt;/h3&gt;

&lt;p&gt;pureCSS在他的網頁上有寫到，如果你要在 &lt;code&gt;grid-u-?-?&lt;/code&gt; 的 div 裡加上 padding（除非你那塊沒有文字，不然很難不加 padding），它上面有寫到你可以這樣做（如果不這麼做寬度就會太多只至於div往下掉）：&lt;/p&gt;
&lt;pre&gt;
.pure-g &gt; div {  
     box-sizing: border-box;   
   } 
&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;可是&amp;#8230; 在我的 FireFox 整個大跑版，這時候你可以試試看補上-moz-box-sizing，如下範例。 &lt;a href='https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing'&gt;參考網址&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;
 .pure-g&gt;div{  
   box-sizing: border-box;  
   -moz-box-sizing: border-box;   
 }&lt;/pre&gt;
&lt;h3 id='author'&gt;Author&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Author : Win Wu&lt;/li&gt;

&lt;li&gt;Blog : &lt;a href='http://yiyingloveart.blogspot.tw/'&gt;http://yiyingloveart.blogspot.tw/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Update Date : 2013-08-31&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>ol, ul 的理解與誤用</title>
   <link href="http://winwu.github.io/2013/09/13/ol_and_ul"/>
   <updated>2013-09-13T21:00:00+08:00</updated>
   <id>http://winwu.github.io/2013/09/13/ol_and_ul</id>
   <content type="html">&lt;h2 id='ol_ul_'&gt;ol, ul 的理解與誤用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;其實標題應該打成 &lt;code&gt;那些年我誤用的&amp;lt;p&amp;gt;與&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>我的 Vim 指令筆記</title>
   <link href="http://winwu.github.io/2013/09/11/my-vim-note"/>
   <updated>2013-09-11T08:00:00+08:00</updated>
   <id>http://winwu.github.io/2013/09/11/my-vim-note</id>
   <content type="html">&lt;h2 id='vim_'&gt;vim 的三種模式&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id='id1'&gt;輸入模式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;輸入內文&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id2'&gt;指揮模式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;也叫指令模式，主要是進入到可以對文件做修改，複製，剪下貼上，游標移動等動作。&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id3'&gt;執行模式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;文件存檔，離開等等行為4。&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id='id4'&gt;常用模式的切換&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;輸入模式 -&amp;gt; 指揮模式 : 鍵盤 &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;指揮模式 -&amp;gt; 輸入模式 : 鍵盤 &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; * 指揮模式 -&amp;gt; 執行模式 : 鍵盤 &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='_vim_'&gt;如何進入 vim 編輯器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;指令 &lt;code&gt;vim&lt;/code&gt; 本身就可以開啓 vim 編輯器，跳出請先到執行模式再按 q(&lt;code&gt;:q&lt;/code&gt;) 然後 Enter 鍵。&lt;/li&gt;

&lt;li&gt;指令 &lt;code&gt;vim 檔名&lt;/code&gt; 可開啓某檔案。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='_vim'&gt;如何離開 vim&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; : 直接離開（在文件沒有被編輯過的情況下可以用）。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; : 強制離開（不儲存你的修改強制離開）。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; : 儲存並離開 (wq順序不能反)。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;:x&lt;/code&gt; : 儲存並離開。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id5'&gt;進入輸入模式的幾個方式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Append:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: 游標前插入文字。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;A&lt;/code&gt;: 游標移到此行最後一個字元。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Insert:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: 游標後插入文字。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;I&lt;/code&gt;: 游標移到此行第一個字元。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Open a new line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt;: 游標所在的那一行，向下插入新的一行。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;O&lt;/code&gt;: 游標所在的那一行，向上插入新的一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id6'&gt;指揮模式下的常用指令(注意大小寫有別)&lt;/h3&gt;

&lt;p&gt;* 針對現在畫面跳到上中下區域： * &lt;code&gt;H&lt;/code&gt; : 跳到畫面上面。 * &lt;code&gt;M&lt;/code&gt; : 跳到畫面中間。 * &lt;code&gt;L&lt;/code&gt; : 跳到畫面下方。 * 上下左右移動： * &lt;code&gt;h&lt;/code&gt; : 往左移動。 * &lt;code&gt;j&lt;/code&gt; : 往下移動。 * &lt;code&gt;k&lt;/code&gt; : 往上移動。 * &lt;code&gt;l&lt;/code&gt; : 往右移動。 * &lt;code&gt;數字 ＋ [h, j, k ,l] &lt;/code&gt; : 往左,下,右,上移動幾個字元。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gg&lt;/code&gt; : 跳到第一行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;G&lt;/code&gt; : 跳到最後一行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;數字 ＋ gg &lt;/code&gt; : 跳到該數字那一行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;數字 ＋ G &lt;/code&gt; : 跳到該數字那一行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; : 移動到上一個字的第一個字元。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt; : 移動到下一個字的第一個字元。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;W&lt;/code&gt; : 移動到下一個字的第一個字元(以空白鍵或是tab鍵當區隔的跳法)。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;ctrl + f&lt;/code&gt; : 下一頁（forward）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;ctrl + b&lt;/code&gt; : 上一頁（back）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;ctrl + g&lt;/code&gt; : 顯示你目前位於整份文件的哪一行。 * &lt;code&gt;^&lt;/code&gt; : 移到此行的第一個字元。 * &lt;code&gt;$&lt;/code&gt; : 移到此行的最後一個字元。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id7'&gt;指令模式下的操作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:f&lt;/code&gt; : 顯示目前檔案路徑。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:q&lt;/code&gt; : 直接離開（在文件沒有被編輯過的情況下可以用）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:q!&lt;/code&gt; : 強制離開（不儲存你的修改強制離開）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:wq&lt;/code&gt; : 儲存並離開 (wq順序不能反)。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:x&lt;/code&gt; : 儲存並離開。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:set nu&lt;/code&gt; : 顯示行號（也有人說:set number，取消則為&lt;code&gt;:set nonumber&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:set list&lt;/code&gt; : 顯示看不見的空白字元或tab鍵。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;:set hlsearch&lt;/code&gt; : 搜尋到的字串反白。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; : 刪除游標所在的那一行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;數字 ＋ dd &lt;/code&gt; : 刪除游標往下多少行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;: 刪除游標後的字元。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt;: 刪除游標前的字元。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;數字＋x(X)&lt;/code&gt; : 刪除游標後（前）多少個字元。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt; : 復原。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;ctrl + r&lt;/code&gt; : 回復（redo）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;yy&lt;/code&gt; : 複製游標所在的那一行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;數字 ＋ yy &lt;/code&gt; : 複製游標下幾行。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; : 游標後貼上。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;P&lt;/code&gt; : 游標前貼上。 * &lt;code&gt;/要搜尋的文字&lt;/code&gt;: 游標往下搜尋你要的文字。 * &lt;code&gt;?要搜尋的文字&lt;/code&gt; : 游標網上搜尋你要的文字。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; : 重複搜尋。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; : 反方向的重複搜尋。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>How To Use Zlip</title>
   <link href="http://winwu.github.io/2013/09/10/how-to-use-zlip"/>
   <updated>2013-09-10T21:00:00+08:00</updated>
   <id>http://winwu.github.io/2013/09/10/how-to-use-zlip</id>
   <content type="html">&lt;h2 id='_zlip__textarea_'&gt;如何使用 Zlip 做出讓 textarea 複製全選的功能&lt;/h2&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://winwu.github.io/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://winwu.github.io/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</content>
 </entry>
 
 
</feed>